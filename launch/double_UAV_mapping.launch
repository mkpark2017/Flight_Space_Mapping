<?xml version="1.0"?>
<launch>
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="$(find flight_space_mapping)/worlds/city_5.world"/>
    <!-- <arg name="debug" value="true"/> -->
    <arg name="paused" value="true"/>
    <!-- <arg name="gui" value="false"/> -->
  </include>

  <arg name="mav_name" default="firefly"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="false" />
  <arg name="log_file" default="$(arg mav_name)" />

  <arg name="ns0" value="$(arg mav_name)0" />
  <group ns="$(arg ns0)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg ns0)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_velodyne.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg ns0)"/>
      <arg name="y" value="-40.0"/>
      <arg name="x" value="5.0"/>
    </include>

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="5 -40 15 0 2"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    <!-- Odom to base_link based on ground truth -->
    <node name="base_odom_tf" pkg="flight_space_mapping" type="base_odom_tf">
      <rosparam param="parent_frame_id" subst_value="True">$(arg ns0)/odom</rosparam>
      <rosparam param="child_frame_id" subst_value="True">$(arg ns0)/base_link</rosparam>
    </node>

    <!-- Ground segmentation -->
<!--
    <node name="ransac_ground_filter" pkg="flight_space_mapping" type="ransac_ground_filter">
      <rosparam param="distance_threashold" subst_value="True">0.3</rosparam>
    </node>
-->
    <node name="ground_filter" pkg="flight_space_mapping" type="pass_through_ground_filter">
      <rosparam param="filter_min" subst_value="True">-1.0</rosparam>
      <rosparam param="filter_max" subst_value="True">14.0</rosparam>
    </node>
  </group>

  <arg name="ns1" value="$(arg mav_name)1" />
  <group ns="$(arg ns1)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg ns1)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_velodyne.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg ns1)"/>
      <arg name="y" value="15.0"/>
      <arg name="x" value="5.0"/>
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="5 15 15 0 2"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

    <!-- Odom to base_link based on ground truth -->
    <node name="base_odom_tf" pkg="flight_space_mapping" type="base_odom_tf">
      <rosparam param="parent_frame_id" subst_value="True">$(arg ns1)/odom</rosparam>
      <rosparam param="child_frame_id" subst_value="True">$(arg ns1)/base_link</rosparam>
    </node>

    <!-- Ground segmentation -->
<!--
    <node name="ransac_ground_filter" pkg="flight_space_mapping" type="ransac_ground_filter">
      <rosparam param="distance_threashold" subst_value="True">0.3</rosparam>
    </node>
-->
    <node name="ground_filter" pkg="flight_space_mapping" type="pass_through_ground_filter">
      <rosparam param="filter_min" subst_value="True">-1.0</rosparam>
      <rosparam param="filter_max" subst_value="True">14.0</rosparam>
    </node>
  </group>

  <!-- segmapper node -->
  <arg name="respawn_value" default="false" /> <!-- boolean: true, false -->
  <rosparam command="load" file="$(find flight_space_mapping)/launch/kitti/kitti_loop_closure_multi.yaml"/>
  <arg name="icp_configuration_file" value="$(find flight_space_mapping)/launch/kitti/icp_dynamic_outdoor.yaml"/>
  <arg name="icp_input_filters_file" value="$(find flight_space_mapping)/launch/kitti/input_filters_outdoor.yaml"/>
  <!-- Enable callgrind profiling -->
  <arg name="enable_callgrind" default="false"/>
  <arg name="callgrind_ouput_path" value="/tmp/segmatch-callgrind.out"/>
  <arg name="launch_prefix" value="valgrind --tool=callgrind --callgrind-out-file=$(arg callgrind_ouput_path) --instr-atstart=no" if="$(arg enable_callgrind)"/> 
  <arg name="launch_prefix" value="" unless="$(arg enable_callgrind)"/>

  <node name="segmapper" pkg="segmapper" type="segmapper_node" output="screen" respawn="false" launch-prefix="$(arg launch_prefix)">
    <param name="icp_configuration_file" value="$(arg icp_configuration_file)"/>
    <param name="icp_input_filters_file" value="$(arg icp_input_filters_file)"/>
    <!-- param name="robot_prefix" value="uav1" / -->
  </node>
  <!-- Rviz visualization config file path -->
  <arg name="rviz_config_file" value="$(env HOME)/.segmap/kitti/kitti_loop_closure.rviz"/>
  <!-- rviz node -->
  <node name="visualizer" pkg="rviz" type="rviz" output="screen" respawn="$(arg respawn_value)" args="-d $(arg rviz_config_file)" />

</launch>
